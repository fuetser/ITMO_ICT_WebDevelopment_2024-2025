{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#web-","title":"\u041f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.","text":""},{"location":"#3341","title":"\u0420\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0417\u0430\u0445\u0430\u0440\u0447\u0443\u043a \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a3341","text":""},{"location":"lab-1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440","text":""},{"location":"lab-1/task1/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"lab-1/task1/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP</li> </ul>"},{"location":"lab-1/task1/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ul> <pre><code>python server.py\n</code></pre> <ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</li> </ul> <pre><code>python client.py\n</code></pre>"},{"location":"lab-1/task1/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430","text":""},{"location":"lab-1/task1/#clientpy","title":"client.py","text":"<pre><code>import socket\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    conn.connect((\"localhost\", 12345))\n\n    conn.send(\"Hello, server\".encode())\n\n    data = conn.recv(1024)\n    print(data.decode())\n\n    conn.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task1/#serverpy","title":"server.py","text":"<pre><code>import socket\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    conn.bind((\"localhost\", 12345))\n\n    data, address = conn.recvfrom(1024)\n    print(data.decode())\n\n    conn.sendto(\"Hello, client\".encode(), address)\n    conn.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439","text":""},{"location":"lab-1/task2/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0432\u0432\u043e\u0434\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p>"},{"location":"lab-1/task2/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP</li> </ul>"},{"location":"lab-1/task2/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ul> <pre><code>python server.py\n</code></pre> <ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: <pre><code>python client.py\n</code></pre></li> </ul>"},{"location":"lab-1/task2/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430","text":""},{"location":"lab-1/task2/#clientpy","title":"client.py","text":"<pre><code>import json\nimport socket\n\n\ndef get_input() -&gt; tuple[int, int]:\n    side1 = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e): \"))\n    side2 = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e): \"))\n\n    return side1, side2\n\n\ndef encode_request(side1: int, side2: int) -&gt; bytes:\n    params_dict = dict(side1=side1, side2=side2)\n    json_string_params = json.dumps(params_dict)\n\n    return json_string_params.encode()\n\n\ndef get_operation_result(side1: int, side2: int) -&gt; float:\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect((\"localhost\", 12345))\n\n    encoded_request = encode_request(side1, side2)\n    conn.send(encoded_request)\n\n    result = conn.recv(1024)\n\n    return float(result.decode())\n\n\ndef main():\n    try:\n        side1, side2 = get_input()\n    except ValueError:\n        print(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\")\n        return\n\n    result = get_operation_result(side1, side2)\n    print(f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 \u0440\u0430\u0432\u043d\u0430 {result}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task2/#serverpy","title":"server.py","text":"<pre><code>import json\nimport math\nimport socket\n\n\ndef decode_request(encoded_request: bytes) -&gt; tuple[int, int]:\n    string_request = encoded_request.decode()\n    params_dict = json.loads(string_request)\n\n    return params_dict[\"side1\"], params_dict[\"side2\"]\n\n\ndef calculate_area(side1: int, side2: int) -&gt; int:\n    return math.sqrt(side1**2 + side2**2)\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind((\"localhost\", 12345))\n    conn.listen(10)\n\n    while True:\n        try:\n            client, address = conn.accept()\n            print(f\"\u041a\u043b\u0438\u0435\u043d\u0442 {address} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f\")\n\n            data = client.recv(1024)\n            side1, side2 = decode_request(data)\n            result = calculate_area(side1, side2)\n\n            client.send(str(result).encode())\n        except KeyboardInterrupt:\n            print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n            conn.close()\n            break\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","text":""},{"location":"lab-1/task3/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p>"},{"location":"lab-1/task3/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP</li> </ul>"},{"location":"lab-1/task3/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ul> <pre><code>python server.py\n</code></pre> <ul> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:</li> </ul> <pre><code>http://localhost:12345/\n</code></pre>"},{"location":"lab-1/task3/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430","text":""},{"location":"lab-1/task3/#serverpy","title":"server.py","text":"<pre><code>import socket\n\n\ndef load_html_file(path: str) -&gt; str:\n    with open(path) as fi:\n        html_data = fi.read()\n\n    return html_data.strip()\n\n\ndef get_html_response(html_data: str) -&gt; bytes:\n    response_parts = [\n        \"HTTP/1.1 200 OK\",\n        \"Content-Type: text/html\\n\",\n        html_data,\n    ]\n\n    return \"\\n\".join(response_parts).encode()\n\n\ndef main():\n    html_data = load_html_file(\"index.html\")\n    html_response = get_html_response(html_data)\n\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind((\"localhost\", 12345))\n    conn.listen(10)\n\n    while True:\n        try:\n            client, address = conn.accept()\n            print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442 {address}\")\n\n            request_data = client.recv(2048)\n            print(f\"\u0417\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {request_data.decode()}\")\n\n            client.send(html_response)\n        except KeyboardInterrupt:\n            print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n            break\n        finally:\n            client.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442","text":""},{"location":"lab-1/task4/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"lab-1/task4/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: socket, threading</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP</li> </ul>"},{"location":"lab-1/task4/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ul> <pre><code>python server.py\n</code></pre> <ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445:</li> </ul> <pre><code>python client.py\n</code></pre>"},{"location":"lab-1/task4/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430","text":""},{"location":"lab-1/task4/#clientpy","title":"client.py","text":"<pre><code>import socket\nimport threading\n\n\ndef receive_messages(client_socket: socket.socket) -&gt; None:\n    while True:\n        try:\n            message = client_socket.recv(1024).decode()\n            print(message)\n        except (Exception, KeyboardInterrupt):\n            client_socket.close()\n            break\n\n\ndef send_messages(client_socket: socket.socket) -&gt; None:\n    while True:\n        try:\n            message = input().strip()\n            client_socket.send(message.encode())\n        except (Exception, KeyboardInterrupt):\n            client_socket.close()\n            break\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect((\"localhost\", 12345))\n\n    send_thread = threading.Thread(target=send_messages, args=(conn,))\n    receive_thread = threading.Thread(target=receive_messages, args=(conn,))\n\n    send_thread.start()\n    receive_thread.start()\n\n    try:\n        receive_thread.join()\n        send_thread.join()\n    except KeyboardInterrupt:\n        print(\"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043e\u0440\u0432\u0430\u043d\u043e\")\n    finally:\n        conn.close()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task4/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport threading\n\n\nclass ChatServer:\n    def __init__(self, host: str, port: int, max_clients: int = 10):\n        self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._conn.bind((host, port))\n        self._conn.listen(max_clients)\n        self._conn.settimeout(1)\n\n        self._is_running = True\n        self._lock = threading.Lock()\n        self._clients = []\n\n    def _broadcast(self, message: str, sender_client: socket.socket) -&gt; None:\n        for client in self._clients:\n            if client == sender_client:\n                continue\n\n            try:\n                client.send(message.encode())\n            except Exception as e:\n                print(f\"\u041d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 {client.getpeername()}: {e}\")\n\n    def _handle_client(self, client_socket: socket.socket) -&gt; None:\n        with self._lock:\n            self._clients.append(client_socket)\n\n        client_name = client_socket.getpeername()\n        message = f\"\u041a\u043b\u0438\u0435\u043d\u0442 {client_name} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f\"\n\n        self._broadcast(message=message, sender_client=client_socket )\n        print(message)\n\n        while self._is_running:\n            try:\n                message = client_socket.recv(1024).decode()\n                if not message:\n                    break\n\n                print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {client_name}: {message}\")\n\n                self._broadcast(\n                    message=f\"{client_name}: {message}\",\n                    sender_client=client_socket,\n                )\n            except Exception as e:\n                print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_name}: {e}\")\n                break\n\n        self._remove_client(client_socket)\n\n    def _remove_client(self, client_socket: socket.socket):\n        with self._lock:\n            if client_socket in self._clients:\n                self._clients.remove(client_socket)\n\n                message = f\"{client_socket.getpeername()} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442\"\n                self._broadcast(message=message, sender_client=client_socket)\n                print(message)\n\n                client_socket.close()\n\n    def _shutdown(self):\n        self._is_running = False\n\n        for client in self._clients:\n            try:\n                client.send(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443\".encode())\n                client.close()\n            except Exception as e:\n                print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {e}\")\n\n        self._conn.close()\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\n    def serve(self):\n        while self._is_running:\n            try:\n                client_socket, _ = self._conn.accept()\n                client_thread = threading.Thread(target=self._handle_client, args=(client_socket,))\n                client_thread.start()\n            except socket.timeout:\n                continue\n            except KeyboardInterrupt:\n                self._shutdown()\n                break\n\ndef main():\n    chat_server = ChatServer(host=\"localhost\", port=12345)\n    try:\n        chat_server.serve()\n    except KeyboardInterrupt:\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"lab-1/task5/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"lab-1/task5/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP</li> </ul>"},{"location":"lab-1/task5/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440:</li> </ul> <pre><code>python server.py\n</code></pre> <ul> <li>\u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442:</li> </ul> <pre><code>python test.py\n</code></pre> <ul> <li>\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443:</li> </ul> <pre><code>http://127.0.0.1:8080/\n</code></pre>"},{"location":"lab-1/task5/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430","text":""},{"location":"lab-1/task5/#data_structurespy","title":"data_structures.py","text":"<pre><code>import functools\nimport io\nfrom urllib.parse import ParseResult, parse_qs, urlparse\n\n\nclass Request:\n    def __init__(\n            self,\n            method: str,\n            target: str,\n            version: str,\n            headers: dict[str, str],\n            stream: io.BufferedReader,\n        ):\n        self.method = method\n        self.target = target\n        self.version = version\n        self.headers = headers\n        self.stream = stream\n\n    def body(self) -&gt; str:\n        size = self.headers.get(\"Content-Length\")\n        if not size:\n            return None\n        return self.stream.read(int(size)).decode()\n\n    @property\n    def path(self) -&gt; str:\n        return self.url.path\n\n    @property\n    @functools.lru_cache(maxsize=None)\n    def query(self) -&gt; dict[str, str]:\n        return parse_qs(self.url.query)\n\n    @property\n    @functools.lru_cache(maxsize=None)\n    def url(self) -&gt; ParseResult:\n        return urlparse(self.target)\n\n\nclass Response:\n    def __init__(\n            self,\n            status: str,\n            reason: str,\n            headers: dict[str, str] | None = None,\n            body: str | None = None,\n        ):\n        self.status = status\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n\n\nclass HTTPError(Exception):\n  def __init__(self, status: str, reason: str, body: str | None = None):\n    super()\n    self.status = status\n    self.reason = reason\n    self.body = body\n</code></pre>"},{"location":"lab-1/task5/#serverpy","title":"server.py","text":"<pre><code>import http\nimport io\nimport socket\nfrom email import message, parser\n\nfrom data_structures import HTTPError, Response, Request\n\nMAX_LINE = 64 * 1024\nMAX_HEADERS = 100\n\n\nclass HTTPServer:\n    def __init__(self, host: str, port: int, max_connections: int = 10):\n        self._host = host\n        self._port = port\n        self._max_connections = max_connections\n        self._grades = {}\n\n    def serve_forever(self) -&gt; None:\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0)\n        server_socket.settimeout(1)\n\n        try:\n            server_socket.bind((self._host, self._port))\n            server_socket.listen(self._max_connections)\n\n            while True:\n                try:\n                    client_socket, address = server_socket.accept()\n                    print(f\"Client connected: {address}\")\n\n                    self.serve_client(client_socket)\n                except TimeoutError:\n                    continue\n                except Exception as e:\n                    print(f\"Client serving failed: {e}\")\n        finally:\n            server_socket.close()\n\n    def serve_client(self, client_socket: socket.socket) -&gt; None:\n        try:\n            request = self.parse_request(client_socket)\n            response = self.handle_request(request)\n            self.send_response(client_socket, response)\n        except Exception as e:\n            self.send_error(client_socket, e)\n        else:\n            request.stream.close()\n            client_socket.close()\n\n    def parse_request_line(self, stream: io.BufferedReader) -&gt; tuple[str, str, str]:\n        raw_line = stream.readline(MAX_LINE + 1)\n        if len(raw_line) &gt; MAX_LINE:\n            raise HTTPError(http.HTTPStatus.BAD_REQUEST, \"Bad request\", \"Request line is too long\")\n\n        words = raw_line.decode(\"iso-8859-1\").split()\n        if len(words) != 3:\n            raise HTTPError(http.HTTPStatus.BAD_REQUEST, \"Bad request\", \"Malformed request line\")\n\n        method, target, version = words\n        if version != \"HTTP/1.1\":\n            raise HTTPError(\n                http.HTTPStatus.HTTP_VERSION_NOT_SUPPORTED, \"HTTP Version Not Supported\",\n            )\n\n        return method, target, version\n\n    def parse_request(self, client_socket: socket.socket) -&gt; Request:\n        request_stream = client_socket.makefile(\"rb\")\n        method, target, version = self.parse_request_line(request_stream)\n        headers = self.parse_headers(request_stream)\n        host = headers.get(\"Host\")\n\n        if not host:\n            raise HTTPError(http.HTTPStatus.BAD_REQUEST, \"Bad request\", \"Host header is missing\")\n        if host not in (self._host, f\"{self._host}:{self._port}\"):\n            raise HTTPError(http.HTTPStatus.NOT_FOUND, \"Not found\")\n\n        request = Request(\n            method=method,\n            target=target,\n            version=version,\n            headers=headers,\n            stream=request_stream,\n        )\n        return request\n\n    def parse_headers(self, stream: io.BufferedReader) -&gt; message.Message:\n        headers = []\n\n        while True:\n            line = stream.readline(MAX_LINE + 1)\n\n            if len(line) &gt; MAX_LINE:\n                raise HTTPError(\n                    http.HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                    \"Request header too large\",\n                )\n\n            if line in (b\"\\r\\n\", b\"\\n\", b\"\"):\n                break\n\n            headers.append(line)\n            if len(headers) &gt; MAX_HEADERS:\n                raise HTTPError(\n                    http.HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                    \"Too many headers\",\n                )\n\n        decoded_headers = b\"\".join(headers).decode(\"iso-8859-1\")\n        return parser.Parser().parsestr(decoded_headers)\n\n    def handle_request(self, request: Request) -&gt; Response:\n        if request.path == \"/\" and request.method == http.HTTPMethod.POST:\n            return self.handle_post(request)\n\n        if request.path == \"/\" and request.method == http.HTTPMethod.GET:\n            return self.handle_get()\n\n        raise HTTPError(http.HTTPStatus.NOT_FOUND, \"Not found\")\n\n    def handle_post(self, request: Request) -&gt; Response:\n        subject = request.query.get(\"subject\")\n        if subject is None:\n            raise HTTPError(\n                http.HTTPStatus.BAD_REQUEST,\n                \"Bad request\",\n                \"No query param for subject\",\n            )\n\n        grade = request.body()\n        if grade is None:\n            raise HTTPError(\n                http.HTTPStatus.BAD_REQUEST,\n                \"Bad request\",\n                \"Request body is empty\",\n            )\n\n        self._grades.setdefault(subject[0], []).append(grade)\n\n        response = Response(\n            status=http.HTTPStatus.CREATED,\n            reason=\"Created\",\n        )\n\n        return response\n\n    def handle_get(self) -&gt; Response:\n        html = \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Grades&lt;/h1&gt;&lt;ul&gt;\"\n\n        for subject, grades in self._grades.items():\n            html += f\"&lt;li&gt;{subject}: {', '.join(grades)}&lt;/li&gt;\"\n\n        html += \"&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;\"\n\n        response = Response(\n            status=http.HTTPStatus.OK,\n            reason=\"OK\",\n            headers={\n                \"Content-Type\": \"text/html\",\n                \"Content-Length\": str(len(html)),\n            },\n            body=html,\n        )\n\n        return response\n\n    def send_response(self, client_socket: socket.socket, response: Response) -&gt; None:\n        response_stream = client_socket.makefile(\"wb\")\n\n        status_line = f\"HTTP/1.1 {response.status} {response.reason}\\n\"\n        response_stream.write(status_line.encode(\"iso-8859-1\"))\n\n        if response.headers:\n            for key, value in response.headers.items():\n                header_line = f\"{key}: {value}\\n\"\n                response_stream.write(header_line.encode(\"iso-8859-1\"))\n\n        response_stream.write(b\"\\n\")\n\n        if response.body:\n            response_stream.write(response.body.encode())\n\n        response_stream.flush()\n        response_stream.close()\n\n    def send_error(self, client_socket: socket.socket, error: HTTPError) -&gt; None:\n        try:\n            status = error.status\n            reason = error.reason\n            body = (error.body or error.reason)\n        except Exception:\n            status = 500\n            reason = b\"Internal Server Error\"\n            body = b\"Internal Server Error\"\n\n        response = Response(\n            status=status,\n            reason=reason,\n            headers={\"Content-Length\": str(len(body))},\n            body=body,\n        )\n        self.send_response(client_socket, response)\n\n\nif __name__ == \"__main__\":\n    server = HTTPServer(host=\"localhost\", port=8080)\n    try:\n        server.serve_forever()\n    except KeyboardInterrupt:\n        print(\"Server stopped.\")\n</code></pre>"},{"location":"lab-2/hotels/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439","text":""},{"location":"lab-2/hotels/#_1","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.</p> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430.</p> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</li> <li>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439.</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.</li> <li>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</li> <li>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.</li> </ul>"},{"location":"lab-2/hotels/#_2","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ul> <li>\u042f\u0437\u044b\u043a: Python</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django, psycopg2</li> </ul>"},{"location":"lab-2/hotels/#_3","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c","text":"<ol> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0434\u043e\u043a\u0435\u0440 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 PostgreSQL:</p> <pre><code>docker run -d \\\n--name postgres_container \\\n-e POSTGRES_USER=myuser \\\n-e POSTGRES_PASSWORD=mypassword \\\n-e POSTGRES_DB=mydatabase \\\n-p 5432:5432 \\\n-v pgdata:/var/lib/postgresql/data \\\npostgres\n</code></pre> </li> <li> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438</p> <pre><code>python manage.py migrate\n</code></pre> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440</p> <pre><code>python manage.py runserver\n</code></pre> </li> </ol>"}]}